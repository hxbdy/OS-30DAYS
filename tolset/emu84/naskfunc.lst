     1 00000000                                 [FORMAT "WCOFF"]
     2 00000000                                 [INSTRSET "i486p"]
     3 00000000                                 [BITS 32]
     4 00000000                                 
     5 00000000                                 [FILE "naskfunc.nas"]
     6 00000000                                     GLOBAL    _io_hlt, _io_cli, _io_sti, _io_stihlt
     7 00000000                                     GLOBAL    _io_in8, _io_in16, _io_in32
     8 00000000                                     GLOBAL    _io_out8, _io_out16, _io_out32
     9 00000000                                     GLOBAL    _io_load_eflags, _io_store_eflags
    10 00000000                                     GLOBAL	  _load_gdtr, _load_idtr
    11 00000000                                 	GLOBAL	_load_cr0, _store_cr0
    12 00000000                                     GLOBAL	_asm_inthandler21, _asm_inthandler27, _asm_inthandler2c
    13 00000000                                 	GLOBAL	_memtest_sub
    14 00000000                                 	EXTERN	_inthandler21, _inthandler27, _inthandler2c
    15 00000000                                 
    16                                          [SECTION .text]
    17 00000000                                 
    18 00000000                                 _io_hlt:    ; void io_hlt(void);
    19 00000000 F4                                  HLT
    20 00000001 C3                                  RET
    21 00000002                                 
    22 00000002                                 _io_cli:
    23 00000002 FA                                  CLI
    24 00000003 C3                                  RET
    25 00000004                                 
    26 00000004                                 _io_sti:
    27 00000004 FB                                  STI
    28 00000005 C3                                  RET
    29 00000006                                 
    30 00000006                                 _io_stihlt:
    31 00000006 FB                                  STI
    32 00000007 F4                                  HLT
    33 00000008 C3                                  RET
    34 00000009                                 
    35 00000009                                 _io_in8:
    36 00000009 8B 54 24 04                         MOV    EDX,[ESP+4]
    37 0000000D B8 00000000                         MOV    EAX,0
    38 00000012 EC                                  IN     AL,DX
    39 00000013 C3                                  RET
    40 00000014                                 
    41 00000014                                 _io_in16:
    42 00000014 8B 54 24 04                         MOV    EDX,[ESP+4]
    43 00000018 B8 00000000                         MOV    EAX,0
    44 0000001D 66 ED                               IN     AX,DX
    45 0000001F C3                                  RET
    46 00000020                                 
    47 00000020                                 _io_in32:
    48 00000020 8B 54 24 04                         MOV    EDX,[ESP+4]
    49 00000024 ED                                  IN     EAX,DX
    50 00000025 C3                                  RET
    51 00000026                                 
    52 00000026                                 _io_out8:
    53 00000026 8B 54 24 04                         MOV    EDX,[ESP+4]
    54 0000002A 8A 44 24 08                         MOV    AL,[ESP+8]
    55 0000002E EE                                  OUT    DX,AL
    56 0000002F C3                                  RET
    57 00000030                                 
    58 00000030                                 _io_out16:
    59 00000030 8B 54 24 04                         MOV    EDX,[ESP+4]
    60 00000034 8B 44 24 08                         MOV    EAX,[ESP+8]
    61 00000038 66 EF                               OUT    DX,AX
    62 0000003A C3                                  RET
    63 0000003B                                 
    64 0000003B                                 _io_out32:
    65 0000003B 8B 54 24 04                         MOV    EDX,[ESP+4]
    66 0000003F 8B 44 24 08                         MOV    EAX,[ESP+8]
    67 00000043 EF                                  OUT    DX,EAX
    68 00000044                                 
    69 00000044                                 _io_load_eflags:
    70 00000044 9C                                  PUSHFD
    71 00000045 58                                  POP    EAX
    72 00000046 C3                                  RET
    73 00000047                                 
    74 00000047                                 _io_store_eflags:
    75 00000047 8B 44 24 04                         MOV    EAX,[ESP+4]
    76 0000004B 50                                  PUSH   EAX
    77 0000004C 9D                                  POPFD
    78 0000004D C3                                  RET
    79 0000004E                                 
    80 0000004E                                 _load_gdtr:		; void load_gdtr(int limit, int addr);
    81 0000004E 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
    82 00000053 66 89 44 24 06                  		MOV		[ESP+6],AX
    83 00000058 0F 01 54 24 06                  		LGDT	[ESP+6]
    84 0000005D C3                              		RET
    85 0000005E                                 
    86 0000005E                                 _load_idtr:		; void load_idtr(int limit, int addr);
    87 0000005E 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
    88 00000063 66 89 44 24 06                  		MOV		[ESP+6],AX
    89 00000068 0F 01 5C 24 06                  		LIDT	[ESP+6]
    90 0000006D C3                              		RET
    91 0000006E                                 
    92 0000006E                                 _load_cr0:
    93 0000006E 0F 20 C0                        		MOV		EAX,CR0
    94 00000071 C3                              		RET
    95 00000072                                 
    96 00000072                                 _store_cr0:
    97 00000072 8B 44 24 04                     		MOV		EAX,[ESP+4]
    98 00000076 0F 22 C0                        		MOV		CR0,EAX
    99 00000079 C3                              		RET
   100 0000007A                                 
   101 0000007A                                 _asm_inthandler21:
   102 0000007A 06                              		PUSH	ES
   103 0000007B 1E                              		PUSH	DS
   104 0000007C 60                              		PUSHAD
   105 0000007D 89 E0                           		MOV		EAX,ESP
   106 0000007F 50                              		PUSH	EAX
   107 00000080 66 8C D0                        		MOV		AX,SS
   108 00000083 8E D8                           		MOV		DS,AX
   109 00000085 8E C0                           		MOV		ES,AX
   110 00000087 E8 [00000000]                   		CALL	_inthandler21
   111 0000008C 58                              		POP		EAX
   112 0000008D 61                              		POPAD
   113 0000008E 1F                              		POP		DS
   114 0000008F 07                              		POP		ES
   115 00000090 CF                              		IRETD
   116 00000091                                 
   117 00000091                                 _asm_inthandler27:
   118 00000091 06                              		PUSH	ES
   119 00000092 1E                              		PUSH	DS
   120 00000093 60                              		PUSHAD
   121 00000094 89 E0                           		MOV		EAX,ESP
   122 00000096 50                              		PUSH	EAX
   123 00000097 66 8C D0                        		MOV		AX,SS
   124 0000009A 8E D8                           		MOV		DS,AX
   125 0000009C 8E C0                           		MOV		ES,AX
   126 0000009E E8 [00000000]                   		CALL	_inthandler27
   127 000000A3 58                              		POP		EAX
   128 000000A4 61                              		POPAD
   129 000000A5 1F                              		POP		DS
   130 000000A6 07                              		POP		ES
   131 000000A7 CF                              		IRETD
   132 000000A8                                 
   133 000000A8                                 _asm_inthandler2c:
   134 000000A8 06                              		PUSH	ES
   135 000000A9 1E                              		PUSH	DS
   136 000000AA 60                              		PUSHAD
   137 000000AB 89 E0                           		MOV		EAX,ESP
   138 000000AD 50                              		PUSH	EAX
   139 000000AE 66 8C D0                        		MOV		AX,SS
   140 000000B1 8E D8                           		MOV		DS,AX
   141 000000B3 8E C0                           		MOV		ES,AX
   142 000000B5 E8 [00000000]                   		CALL	_inthandler2c
   143 000000BA 58                              		POP		EAX
   144 000000BB 61                              		POPAD
   145 000000BC 1F                              		POP		DS
   146 000000BD 07                              		POP		ES
   147 000000BE CF                              		IRETD
   148 000000BF                                 
   149 000000BF                                 _memtest_sub:	; unsigned int memtest_sub(unsigned int start, unsigned int end)
   150 000000BF 57                              		PUSH	EDI						; ÅiEBX, ESI, EDI Ç‡égÇ¢ÇΩÇ¢ÇÃÇ≈Åj
   151 000000C0 56                              		PUSH	ESI
   152 000000C1 53                              		PUSH	EBX
   153 000000C2 BE AA55AA55                     		MOV		ESI,0xaa55aa55			; pat0 = 0xaa55aa55;
   154 000000C7 BF 55AA55AA                     		MOV		EDI,0x55aa55aa			; pat1 = 0x55aa55aa;
   155 000000CC 8B 44 24 10                     		MOV		EAX,[ESP+12+4]			; i = start;
   156 000000D0                                 mts_loop:
   157 000000D0 89 C3                           		MOV		EBX,EAX
   158 000000D2 81 C3 00000FFC                  		ADD		EBX,0xffc				; p = i + 0xffc;
   159 000000D8 8B 13                           		MOV		EDX,[EBX]				; old = *p;
   160 000000DA 89 33                           		MOV		[EBX],ESI				; *p = pat0;
   161 000000DC 83 33 FF                        		XOR		DWORD [EBX],0xffffffff	; *p ^= 0xffffffff;
   162 000000DF 3B 3B                           		CMP		EDI,[EBX]				; if (*p != pat1) goto fin;
   163 000000E1 75 18                           		JNE		mts_fin
   164 000000E3 83 33 FF                        		XOR		DWORD [EBX],0xffffffff	; *p ^= 0xffffffff;
   165 000000E6 3B 33                           		CMP		ESI,[EBX]				; if (*p != pat0) goto fin;
   166 000000E8 75 11                           		JNE		mts_fin
   167 000000EA 89 13                           		MOV		[EBX],EDX				; *p = old;
   168 000000EC 05 00001000                     		ADD		EAX,0x1000				; i += 0x1000;
   169 000000F1 3B 44 24 14                     		CMP		EAX,[ESP+12+8]			; if (i <= end) goto mts_loop;
   170 000000F5 76 D9                           		JBE		mts_loop
   171 000000F7 5B                              		POP		EBX
   172 000000F8 5E                              		POP		ESI
   173 000000F9 5F                              		POP		EDI
   174 000000FA C3                              		RET
   175 000000FB                                 mts_fin:
   176 000000FB 89 13                           		MOV		[EBX],EDX				; *p = old;
   177 000000FD 5B                              		POP		EBX
   178 000000FE 5E                              		POP		ESI
   179 000000FF 5F                              		POP		EDI
   180 00000100 C3                              		RET
